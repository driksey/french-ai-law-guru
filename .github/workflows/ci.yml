name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: "Tests and Linting"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        # Try mypy but don't fail the build if there are internal errors
        mypy legal_ai_assistant/ --ignore-missing-imports || echo "Mypy completed with warnings/errors"
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short
    
    - name: Check imports
      run: |
        python -c "from legal_ai_assistant import agents, utils, config, chat_handler, local_models; print('All modules imported successfully')"
    
    - name: Test token calculation
      run: |
        python -c "from legal_ai_assistant.utils import calculate_max_response_tokens; result = calculate_max_response_tokens(1000, 3); print(f'Token calculation works: {result} tokens')"
    
    - name: Test prompt creation
      run: |
        python -c "from legal_ai_assistant.agents import create_prompt_strict; prompt = create_prompt_strict('fr'); print('Prompt creation works')"
    
    - name: Test configuration
      run: |
        python -c "from legal_ai_assistant.config import LLM_CONFIG, EMBEDDING_CONFIG, APP_CONFIG; print('Configuration loaded successfully')"
